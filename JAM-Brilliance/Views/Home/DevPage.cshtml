@using System.Collections
@using System.Configuration
@using System.Reflection
@using System.Threading
@using JAM.Brilliance.Controllers
@using JAM.Core.Logic
@model int

@{ Html.RenderAction("ToolbarAdmin", "Home"); }
<br /><br />
<fieldset>
    <legend>Developer Info</legend>
    @Html.ActionLink("ELMAH", "GotoElmah", "Home")<br />

    <br />
    @{
        /* Microsoft SQL Azure (RTM) - 11.0.9225.9   Sep 22 2014 22:55:00   Copyright (c) Microsoft Corporation */
        var cs = ConfigurationManager.ConnectionStrings[Constants.ConnectionStringName].ConnectionString;
        var pwdIdx = cs.IndexOf("password", StringComparison.CurrentCultureIgnoreCase);
        if (pwdIdx == -1)
        {
            pwdIdx = cs.Length;
        }
        cs = cs.Substring(0, pwdIdx);
        @Html.Raw(string.Format("Conn: {0}", cs))<br />
    }
    <br />

    @Html.Raw(string.Format("SurveyId: {0}", Model))<br />
    @Html.Raw(string.Format("User: {0}", User.Identity.Name))<br />
    @Html.Raw(string.Format("AuthType: {0}", User.Identity.AuthenticationType))<br />
    @Html.Raw(string.Format("Roles: {0}", string.Join(", ", Roles.GetRolesForUser())))<br />
    @Html.Raw(string.Format("Role AppName: {0}", Roles.ApplicationName))<br />
    @Html.Raw(string.Format("Membership AppName: {0}", Membership.ApplicationName))<br />
    <br />
    @Html.Raw(string.Format("Current Culture: {0}", Thread.CurrentThread.CurrentCulture))<br />
    @Html.Raw(string.Format("UI Culture: {0}", Thread.CurrentThread.CurrentUICulture))<br />
    <br />
    @Html.Raw(string.Format("Client IP: {0}", Request.ServerVariables["REMOTE_ADDR"]))<br />
    @Html.Raw(string.Format("Server IP: {0}", Request.ServerVariables["LOCAL_ADDR"]))<br />
    @Html.Raw(string.Format("Server Port: {0}", Request.ServerVariables["SERVER_PORT"]))<br />

    @Html.Raw(string.Format("IIS Service Account: {0} \\ {1}", @Environment.UserDomainName, @Environment.UserName))<br />
    @Html.Raw(string.Format(".NET CLR Version: {0}", @Environment.Version))<br />

    @Html.Raw(string.Format("Machine: {0}", Environment.MachineName))<br />
    @Html.Raw(string.Format("OS: {0}", Environment.OSVersion))<br />
    @Html.Raw(string.Format("Server software: {0}", Request.ServerVariables["SERVER_SOFTWARE"]))<br />
    @Html.Raw(string.Format("HTTPs: {0}", Request.ServerVariables["HTTPS"]))<br />
    @Html.Raw(string.Format("Path: {0}", Request.ServerVariables["PATH_INFO"]))<br />
    @Html.Raw(string.Format("Absolute Path: {0}", Request.ServerVariables["PATH_TRANSLATED"]))<br />
    @Html.Raw(string.Format("DLL path: {0}", typeof(HomeController).Assembly.GetName().CodeBase))<br />
    @Html.Raw(string.Format("Build date: {0}", File.GetLastWriteTime(typeof(HomeController).Assembly.Location).ToString("yyyy-MM-dd HH:mm:ss")))
    @{
        var cnf = Attribute.GetCustomAttribute(typeof(HomeController).Assembly, typeof(AssemblyConfigurationAttribute)) as AssemblyConfigurationAttribute;
        if (cnf != null)
        {
            <span><br />Build configuration: @cnf.Configuration</span><br />
        }
    }
    @Html.Raw(string.Format("JAM-Dating Version: {0}", typeof(HomeController).Assembly.GetName().Version))<br />

    @Html.Raw(string.Format("MVC Version: {0}", typeof(Controller).Assembly.GetName().Version))<br />

    jQuery version: <span id="jQueryVersion"></span><br /><br />

    @if (Session != null)
    {
        @Html.Raw(string.Format("Session ID: {0}", Session.SessionID))<br />
        @Html.Raw(string.Format("Session Timeout: {0}m", Session.Timeout))<br />
        @Html.Raw(string.Format("Session Mode: {0}", Session.Mode))<br />
        <div>
            Session Keys <br />
            <ul>
                @foreach (var s in HttpContext.Current.Session.Keys)
                {
                    <li>@s - @HttpContext.Current.Session[s as string] </li>
                }
            </ul>
        </div>
    }
    else
    {
        <span>No Session<br /></span>
    }
    Cookies<br />
    <ul>
        @* _ga, _gat, __utma, __utmz is from google analytics. __RequestVerificationToken is antiforgerytoken, ARRAffinity is from Azure, cultureCode is our own  *@
        @foreach (var c in HttpContext.Current.Request.Cookies.AllKeys)
        {
            var cookie = HttpContext.Current.Request.Cookies[c];
            <li>@c - @Server.UrlDecode(cookie.Value) - @(cookie.HttpOnly ? "HttpOnly" : "") - @(cookie.Secure ? "Secure" : "")</li>
        }
    </ul>
    Environmental variables<br />
    <ul>
        @*   *@
        @foreach (DictionaryEntry ev in Environment.GetEnvironmentVariables())
        {
            <li>@ev.Key - @ev.Value</li>
        }
    </ul>
</fieldset>

<script>
    $("#jQueryVersion").text(jQuery.prototype.jquery);
</script>
